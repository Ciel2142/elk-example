input {
  beats {
    port => 5000
  }
  kafka{
    codec => json
    bootstrap_servers => "kafka:9092"
    topics => [ "logs" ]
  }
}

filter {
  if "crm" in [tags] {
    json {
      source => "message"
    }
  } else if "panda" in [tags] {
      grok {
        break_on_match => true
        match => { "message" => [ "(?<logtimestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}%{SPACE}%{HOUR}:%{MINUTE}:%{SECOND})%{SPACE}%{LOGLEVEL}%{DATA:trash}]%{SPACE}\.%{DATA:where}%{SPACE}:%{DATA:trash}\",\"event\":\"%{WORD:event}\",\"message\":%{GREEDYDATA:msgTail}", "(?<logtimestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}%{SPACE}%{HOUR}:%{MINUTE}:%{SECOND})%{SPACE}%{LOGLEVEL}%{GREEDYDATA:msgTail}" ] }
      }
      grok{
        break_on_match => true
        match => { "message" => ["%{DATA:trash}\"companyId\":%{NUMBER:companyId}%{DATA:trash}?", "%{YEAR:trash}%{DATA:companyId}%{GREEDYDATA:trash}"] }
      }
      grok{
        break_on_match => true
        match => { "message" => ["%{DATA:trash}\"login\":\"%{WORD:trName}%{DATA:trash}", "%{YEAR:trash}%{DATA:trName}%{GREEDYDATA:trash}"] }
      }
      grok{
        break_on_match => true
        match => { "message" => ["%{DATA:trash}\"cpId\":%{NUMBER:cpId}%{DATA:trash}", "%{YEAR:trash}%{DATA:cpId}%{GREEDYDATA:trash}"] }
      }
      grok{
        break_on_match => true
        match => { "message" => ["%{DATA:trash},\"email\":\"%{DATA:email}[\",}]%{DATA:trash}", "%{YEAR:trash}%{DATA:email}%{GREEDYDATA:trash}"] }
      }
      grok{
        break_on_match => true
        match => { "message" => ["%{DATA:trash}\"cert\":\"%{NUMBER:cert}%{DATA:trash}", "%{YEAR:trash}%{DATA:cert}%{GREEDYDATA:trash}"] }
      }
      grok{
        break_on_match => true
        match => { "message" => ["%{DATA:trash}\"exception\":\"%{DATA:exception}[\",}]%{DATA:trash}", "%{YEAR:trash}%{DATA:exception}%{GREEDYDATA:trash}"] }
      }
      grok{
        break_on_match => true
        match => { "message" => ["%{DATA:trash}\"exceptionMessage\":\"%{DATA:exceptionMessage}[\",}]%{DATA:trash}", "%{YEAR:trash}%{DATA:exceptionMessage}%{GREEDYDATA:trash}"] }
      }
      grok{
        break_on_match => true
        match => { "message" => ["%{DATA:trash}\"exceptionFirstStackTrace\":%{DATA:exceptionFirstStackTrace}[}]%{DATA:trash}", "%{YEAR:trash}%{DATA:exceptionFirstStackTrace}%{GREEDYDATA:trash}"] }
      }
      mutate {
         remove_field => ["trash"]
      }
      date {
        timezone => "Europe/Moscow"
        match => [ "logtimestamp", "YYYY-MM-dd HH:mm:ss'.'SSS"]
        target => "@timestamp"
      }
  }
  else if ("microservices-esb" not in [tags]) {
    if ([isJsonLog]) {
      mutate {
        copy => { "@timestamp" => "log_date" }
      }
    } else {
      grok {
        match => {
          message => [
            '%{TIMESTAMP_ISO8601:log_date} - %{DATA:application} - %{GREEDYDATA:thread} %{SPACE}%{LOGLEVEL:log_level} %{SPACE}%{NOTSPACE:logger} %{GREEDYDATA:line} - %{GREEDYDATA:msg}',
            '%{TIMESTAMP_ISO8601:log_date} - %{DATA:application} - %{NOTSPACE:thread} %{SPACE}%{LOGLEVEL:log_level} %{SPACE}%{NOTSPACE:logger} %{NOTSPACE:line} - %{GREEDYDATA:msg}',
            '%{TIMESTAMP_ISO8601:log_date} - %{DATA:application} - %{NOTSPACE:thread} %{NOTSPACE:log_level} %{SPACE}%{GREEDYDATA:msg}'
          ]
        }
      }
      date {
        match => [ "log_date", "ISO8601", "YYYY-MM-dd HH:mm:ss.SSS", "YYYY-MM-dd HH:mm:ss.ZZZ" ]
        target => "log_date"
        locale => "ru"
      }
    }
    mutate {
      lowercase => [ "application" ]
      remove_field => [ "SKIP", "SKIP2" ]
    }
  } else if "esb" in [tags] {
    mutate {
      lowercase => [ "MESSAGETYPE" ]
      remove_field => [ "event", "event.original", "original", "message"]
    }
  }
}


output {
  elasticsearch {
    index => "service-%{[application]}-%{+YYYY.MM.dd}"
    hosts => ["http://elasticsearch:9200"]
    user => "${ES_USER}"
    password => "${ES_PASSWORD}"
  }

  stdout {}
}
